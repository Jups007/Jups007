# -*- coding: utf-8 -*-
"""Untitled9.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dv53kf0jFQVlxZObEATLxcOgwt2KemQK
"""

#create the dictionary with graph elements
graphn = {"a" : ["b","c"],
         "b" : ["a","d"],
         "c" : ["a","d"],
         "d" : ["e"],
         "e" : ["d"]
         }
#print the graph
print(graphn)

class Graph:
  def __init__(self, gdict=None):
    if gdict is None:
      gdict = {}
    self.gdict = gdict

#Get the keys of the dictionary
  def getVertices(self):
    return list(self.gdict.keys())

#create dictionary with graph elements
graph_elements = {
         "a" : ["b","c"],
         "b" : ["a","d"],
         "c" : ["a","d"],
         "d" : ["e"],
         "e" : ["d"]
         }
#create an distance of the Graph class and pass the graph_elements
g = Graph(graph_elements)
#print the vertices by calling the getVertices method with parentheses
print(g.getVertices())

class graph:
  def __init__(self,gdict=None):
    if gdict is None:
      gdict = {}
    self.gdict = gdict

  def getVertices(self):
    return list(self.gdict.keys())

  def addVertex(self, vrtx):
    if vrtx not in self.gdict:
      self.gdict[vrtx] =  []

graph_elements = { "a" : ["b","c"],
         "b" : ["a","d"],
         "c" : ["a","d"],
         "d" : ["e"],
         "e" : ["d"]
}

g = graph(graph_elements)
g.addVertex("f")
print(g.getVertices())

#LATIHAN 1
# S T U V W X Z

graph1 = { "S" : ["X"],
          "T" : ["U","W"],
          "U" : ["T","V"],
          "V" : ["U","X"],
          "W" : ["T","X","Z"],
          "X" : ["V","W","S"],
          "Z" : ["W"]}

print(graph1)
type(graph1)

#LATIHAN 2

graph1 = { "r" : ["o","I"],
          "o" : ["r","m","p"],
          "m" : ["o","n"],
          "n" : ["m","p"],
          "p" : ["I","o","n"],
          "I" : ["r","p"]
          }

print(graph1)
type(graph1)

class graph:
  def __init__(self,gdict=None):
    if gdict is None:
      gdict = {}
    self.gdict = gdict

  def getVertices(self):
    return list(self.gdict.keys())

  def addVertex(self, vrtx):
    if vrtx not in self.gdict:
      self.gdict[vrtx] =  []

graph_elements = { "S" : ["X"],
          "T" : ["U","W"],
          "U" : ["T","V"],
          "V" : ["U","X"],
          "W" : ["T","X","Z"],
          "X" : ["V","W","S"],
          "Z" : ["W"]}

g = graph(graph_elements)
g.addVertex("f")
print(g.getVertices())

class graph:
  def __init__(self,gdict=None):
    if gdict is None:
      gdict = {}
    self.gdict = gdict

  def edges(self):
    return self.findeges()

  def findedges(self):
    edgename = []
    for vrtx in sel.gdict:
      for nxtvrtx in self.gdict[vrtx]:
        if {nxtvrtx, vrtx} not in edgename:

          edgename.append({vrtx, nxtvrtx})
        return edgename

graph_elements = { "a" : ["b","c"],
         "b" : ["a","d"],
         "c" : ["a","d"],
         "d" : ["e"],
         "e" : ["d"]
}

g = graph(graph_elements)
print(g.edges)

class graph:
  def __init__(self,gdict=None):
    if gdict is None:
      gdict = {}
    self.gdict = gdict

  def getVertices(self):
    return list(self.gdict.keys())

  def addVertex(self, vrtx):
    if vrtx not in self.gdict:
      self.gdict[vrtx] =  []

graph_elements = { "r" : ["o","I"],
          "o" : ["r","m","p"],
          "m" : ["o","n"],
          "n" : ["m","p"],
          "p" : ["I","o","n"],
          "I" : ["r","p"]
          }

g = graph(graph_elements)
g.addVertex("f")
print(g.getVertices())

class graph:
  def __init__(self,gdict=None):
    if gdict is None:
      gdict = {}
    self.gdict = gdict

  def getVertices(self):
    return list(self.gdict.keys())

  def addVertex(self, vrtx):
    if vrtx not in self.gdict:
      self.gdict[vrtx] =  []

graph_elements = { "a" : ["b","c"],
         "b" : ["a","d"],
         "c" : ["a","d"],
         "d" : ["e"],
         "e" : ["d"]
}

g = graph(graph_elements)
g.addVertex("f")
print(g.getVertices())

class graph:
  def __init__(self,gdict=None):
    if gdict is None:
      gdict = []
    self.gdict = gdict

  def edges(self):
    return self.finedges()

  def Addedge(self, edge):
    edge = set(edge)
    (vrtx1, vrtx2) = tuple(edge)
    if vrtx1 in self.gdict:
      self.gdict[vrtx1].append(vrtx2)
    else:
      self.gdict[vrtx1] = [vrtx2]

#Mencari list hubungan antar vertex
  def finedges(self):
    edgename = []
    for vrtx in self.gdict:
      for nxtvrtx in self.gdict[vrtx]:
        if {nxtvrtx, vrtx} not in edgename:
          edgename.append({vrtx,nxtvrtx})
    return edgename

graph_elements = graphn
g = graph(graph_elements)
g.Addedge({'a','e'})
g.Addedge({'a','c'})
print(g.edges())

#Latihan menambahkan Variabel ke TUV

graph_elements = graphn
g = graph(graph_elements)
g.Addedge({'Z','R'})
g.Addedge({'S','R'})
print(g.edges())

#Latihan menambahkan Variabel ke ROM

graph_elements = graphn
g = graph(graph_elements)
g.Addedge({'L','K'})
g.Addedge({'N','J'})
print(g.edges())