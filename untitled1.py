# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rb9eYA_5trzcxiStGjFXlQdCG9qjKys4
"""

bin_colors=('red','green','yellow','blue')
bin_colors[0:4]

import datetime

Mahasiswa = [
    "Nama:Juan Rexy Theresius Pratama",
    "NIM:2022071035",
    "Prodi:Informatika",
    "Mata_kuliah:Desain dan Analisis ALgoritma",
]
nama_Universitas = "Universitas Pembangunan Jaya"
Tanggal_hari_ini = datetime.date.today()

print("Profil Mahasiswa di", nama_Universitas)
print("Tanggal Hari ini :", Tanggal_hari_ini)
print(Mahasiswa)

Mahasiswa = {
    "Nama":"Juan Rexy Theresius Pratama",
    "NIM":"2022071035",
    "Prodi":"Informatika",
    "Mata_kuliah":"Desain dan Analisis ALgoritma",
}
Mahasiswa.get ("NIM")

Mahasiswa = {
    "Nama":"Juan Rexy Theresius Pratama",
    "NIM":"2022071035",
    "Prodi":"Informatika",
    "Mata_kuliah":"Desain dan Analisis ALgoritma",
}
Mahasiswa.get ("Prodi")

#Latihan Square
bin_Mahasiswa = ("juan","rexy","Theresius","Pratama")
for aMahasiswa in bin_Mahasiswa:
  print(aMahasiswa + "Square")

#latihan Slicing
bin_Mahasiswa = ("Nama:Juan Rexy Theresius Pratama",
    "NIM:2022071035",
    "Prodi:Informatika",
    "Mata_kuliah:Desain dan Analisis ALgoritma",)
bin_Mahasiswa[2:3]

#Latihan tupples
bin_UPJ = ('Universitas','Pembangunan','Jaya')
bin_UPJ[1]
bin_UPJ[0:]

#NESTED TUPLE
Pertama=("100")
Kedua=("200", "400", "600")
Ketiga=("300")
Keempat=("400", "800")
Total = (Pertama,Kedua,Ketiga,Keempat)
print(Total)

#DICTIONARY
import numpy as np

bin_mahasiswa = {"NAMA"  :"Juan",
              "NIM " : "202207105",
              "Prodi " : "Informatika",
              "Mata Kuliah" : "Desain Analisis Algoritma",
              "Universitas" : "Universitas Pembangunan Jaya"}
print(bin_mahasiswa)

#Latihan DataFrame
import pandas as pd
data = {'prodi': ["informatika","sistem informasi","Teknik Sipil"],
        'mahasiswa ': [4,6,5],
        'lakilaki': [2,3,3],
        'perempuan': [2,3,2]}
df = pd.DataFrame(data,index=['a','b','c'])
df.head()

#latihan Matriks
import numpy as np
matriksC = np.array([[100,200,300],[700,600,500],[900,800,1000]])
print("matriksC : ")
print(matriksC)

Tranpose_matriks = np.transpose(matriksC)
print("Transpose matriksC : ")
print(Tranpose_matriks)

#latihan Stack
class stack:
  def __init__(self):
    self.items = []
  def isEmpty(self):
    return self.items == []
  def push(self, item):
    self.items.append(item)
  def pop(self):
    return self.items.pop()
  def peek(self):
    return self.items[len(self.items)-1]
  def size(self):
    return len(self.items)

stack=stack()
stack.push('red')
stack.push('green')
stack.push('blue')
stack.push('yellow')

stack.pop()
stack.isEmpty()